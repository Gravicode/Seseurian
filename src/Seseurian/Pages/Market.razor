@layout MainLayoutMarket
@page "/market"
@inject IJSRuntime IJS
@using System.IO
@using System.Text.Json
@using System.Text.RegularExpressions;
@inject IToastService toastService
@inject UserProfileService UserSvc
@inject ProductService ProductSvc
<div class="container m-auto">

    <h1 class="lg:text-2xl text-lg font-extrabold leading-none text-gray-900 tracking-tight mb-2"> Market </h1>

    <div class="lg:m-0 -mx-5 flex justify-between py-4 relative space-x-3 uk-sticky dark-tabs" uk-sticky="cls-active: bg-gray-100 bg-opacity-95" style="">
        <div class="flex overflow-x-scroll lg:overflow-hidden lg:pl-0 pl-5 space-x-3">
            @foreach (var cat in AppConstants.ProductCategories.Take(4))
            {
                <a href="#" @onclick:preventDefault @onclick="()=>LoadFilteredData(cat.Name)" class="bg-white py-2 px-4 rounded inline-block font-bold shadow"> @cat.Name</a>
            }


        </div>
        <a href="#" uk-toggle="target: #offcanvas-create" @onclick="CreateItem" class="bg-pink-500 hover:bg-pink-600 hover:text-white flex font-bold inline-block items-center px-4 py-2 rounded shadow text-white lg:block hidden"> <i class="-mb-1 mr-1 uil-plus"></i> Create</a>
    </div>

    <div class="relative mt-4" uk-slider="finite: true">

        <div class="uk-slider-container pb-3">

            <ul class="uk-slider-items uk-child-width-1-5@m uk-child-width-1-3@s uk-child-width-1-2 uk-grid-small uk-grid">
                <Virtualize Items="@LatestProducts" Context="item">
                    <li @key="item.Id">
                        <a href="#" @onclick="()=>ViewItem(item)" uk-toggle="target: #offcanvas-preview">
                            <div class="market-list">
                                <div class="item-media"> <img src="@(string.IsNullOrEmpty(item.PicUrl)? "assets/images/product/12.jpg" : item.PicUrl)" alt=""></div>

                                <div class="item-inner">
                                    <div class="item-price"> Rp @item.Price.ToString("n0") </div>
                                    <div class="item-title"> @item.Name </div>
                                    <div class="item-statistic">
                                        <span> <span class="count">@item.Likes.Count()</span> likes </span>
                                        <span> <span class="count">@item.Views.Count()</span> views </span>
                                    </div>
                                </div>
                            </div>
                        </a>
                    </li>

                </Virtualize>

            </ul>

            <a class="-left-5 absolute bg-white bottom-1/2 flex h-11 items-center justify-center mb-8 p-2 rounded-full shadow text-2xl w-11 z-10 dark:bg-gray-800 dark:text-white" href="#" uk-slider-item="previous"> <i class="icon-feather-chevron-left"></i> </a>
            <a class="-right-5 absolute bg-white bottom-1/2 flex h-11 items-center justify-center mb-8 p-2 rounded-full shadow text-2xl w-11 z-10 dark:bg-gray-800 dark:text-white" href="#" uk-slider-item="next"> <i class="icon-feather-chevron-right"></i></a>

        </div>

    </div>

    <div class="flex justify-between mt-6 mb-4">
        <h1 class="lg:text-2xl text-lg font-extrabold leading-none text-gray-900 tracking-tight"> Categories </h1>
        <a style="display:none;" href="#" class="text-blue-400 hover:text-blue-500"> See all</a>
    </div>

    <div class="relative" uk-slider="finite: true">

        <div class="uk-slider-container pb-3">

            <ul class="uk-slider-items uk-child-width-1-6@m uk-child-width-1-3@s uk-child-width-1-2 uk-grid-small uk-grid">
                <Virtualize Items="@AppConstants.ProductCategories" Context="cat">
                    <li @key="@cat.id">
                        <a href="#" @onclick:preventDefault @onclick="()=>LoadFilteredData(cat.Name)">
                            <div class="group-catagroy-card" data-src="@cat.PicUrl" uk-img>
                                <div class="group-catagroy-card-content">
                                    <h4> @cat.Name </h4>
                                </div>
                            </div>
                        </a>
                    </li>
                </Virtualize>
            </ul>

            <a class="-left-5 absolute bg-white bottom-1/2 flex h-11 items-center justify-center -mb-3 p-2 rounded-full shadow text-2xl w-11 z-10 dark:bg-gray-800 dark:text-white" href="#" uk-slider-item="previous"> <i class="icon-feather-chevron-left"></i> </a>
            <a class="-right-5 absolute bg-white bottom-1/2 flex h-11 items-center justify-center -mb-3 p-2 rounded-full shadow text-2xl w-11 z-10 dark:bg-gray-800 dark:text-white" href="#" uk-slider-item="next"> <i class="icon-feather-chevron-right"></i></a>

        </div>
    </div>

    <hr class="my-3 my-sm-2">

    <div class="flex justify-between mt-6 mb-4">
        <h1 class="lg:text-2xl text-lg font-extrabold leading-none text-gray-900 tracking-tight">  @SelectedCategory </h1>
        <a style="display:none;" href="#" class="text-blue-400 hover:text-blue-500"> See all</a>
    </div>

    <div class="relative" uk-slider="finite: true">

        <div class="uk-slider-container pb-3">

            <ul class="uk-slider-items uk-child-width-1-5@m uk-child-width-1-3@s uk-child-width-1-2 uk-grid-small uk-grid">
                <Virtualize Items="@FilteredProducts" Context="item">
                    <li @key="item.Id">
                        <a href="#" @onclick="()=>ViewItem(item)" uk-toggle="target: #offcanvas-preview">
                            <div class="market-list">
                                <div class="item-media">
                                    <img src="@(string.IsNullOrEmpty(item.PicUrl)? "assets/images/product/12.jpg" : item.PicUrl)" alt="">
                                </div>
                                <div class="item-inner">
                                    <div class="item-price"> Rp @item.Price.ToString("n0") </div>
                                    <div class="item-title"> @item.Name </div>
                                    <div class="item-statistic">
                                        <span> <span class="count">@item.Likes.Count()</span> likes </span>
                                        <span> <span class="count">@item.Views.Count()</span> views </span>
                                    </div>
                                </div>
                            </div>
                        </a>
                    </li>
                </Virtualize>


            </ul>

            <a class="-left-5 absolute bg-white bottom-1/2 flex h-11 items-center justify-center mb-8 p-2 rounded-full shadow text-2xl w-11 z-10 dark:bg-gray-800 dark:text-white" href="#" uk-slider-item="previous"> <i class="icon-feather-chevron-left"></i> </a>
            <a class="-right-5 absolute bg-white bottom-1/2 flex h-11 items-center justify-center mb-8 p-2 rounded-full shadow text-2xl w-11 z-10 dark:bg-gray-800 dark:text-white" href="#" uk-slider-item="next"> <i class="icon-feather-chevron-right"></i></a>

        </div>

    </div>

</div>

@code {
    string SelectedCategory = "Hits";
    [CascadingParameter]
    public MainLayoutMarket Layout { get; set; }
    List<Product> LatestProducts = new();
    List<Product> FilteredProducts = new();

    UserProfile selUser;

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    string Username;

    protected override async Task OnInitializedAsync()
    {
        var user = (await authenticationStateTask).User;

        if (user.Identity.IsAuthenticated)
        {
            Username = user.Identity.Name;
            selUser = UserSvc.GetItemByUsername(Username);
            await LoadData();
            await LoadFilteredData("");
        }
    }

    async Task LoadData()
    {
        LatestProducts = ProductSvc.GetLatest();
    }

    async Task LoadFilteredData(string Category)
    {
        if (string.IsNullOrEmpty(Category))
        {
            FilteredProducts = ProductSvc.GetHits();

        }
        else
        {
            SelectedCategory = Category;
            FilteredProducts = ProductSvc.GetByCategory(Category);
        }
    }

    async Task ViewItem(Product Item)
    {
        Layout.SetProduct(Item);
        //Layout.ViewProduct = Item;
    }

    async Task CreateItem()
    {
        Layout.NewProduct = new();
        //await IJS.InvokeVoidAsync("ShowModal", "offcanvas-create");
    }
}
