@inject UserProfileService UserSvc
<div class="bg-white dark:bg-gray-900 shadow-md rounded-md overflow-hidden">

    <div class="bg-gray-50 dark:bg-gray-800 border-b border-gray-100 flex items-baseline justify-between py-4 px-6 dark:border-gray-800">
        <h2 class="font-semibold text-lg">Who to follow</h2>
        <a href="#"> Refresh</a>
    </div>

    <div class="divide-gray-300 divide-gray-50 divide-opacity-50 divide-y px-4 dark:divide-gray-800 dark:text-gray-100">
        @if (ListFollow != null)
        {
            @foreach (var usr in ListFollow)
            {
                <div class="flex items-center justify-between py-3">
                    <div class="flex flex-1 items-center space-x-4">
                        <a href="profile">
                            <img src="@(string.IsNullOrEmpty(usr.User.PicUrl)?"assets/images/avatars/avatar-2.jpg":usr.User.PicUrl)" class="bg-gray-200 rounded-full w-10 h-10">
                        </a>
                        <div class="flex flex-col">
                            <span class="block capitalize font-semibold"> @usr.User.FullName </span>
                            <span class="block capitalize text-sm"> @usr.User.Pekerjaan </span>
                        </div>
                    </div>

                    <a href="#" @onclick:preventDefault @onclick="(()=>ToggleFollow(usr))" class="border border-gray-200 font-semibold px-4 py-1 rounded-full hover:bg-pink-600 hover:text-white hover:border-pink-600 dark:border-gray-800">
                        @if (usr.IsFollow)
                        {
                            @("Following")
                        }
                        else
                        {
                            @("Follow")
                        }
                    </a>
                </div>
            }
        }
    </div>

</div>
@code {


    [Parameter]
    public string Username { get; set; }
    //public List<UserProfile> ListUser { get; set; }
    public List<TempFollow> ListFollow { get; set; }
    UserProfile selUser;

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }


    protected override async Task OnInitializedAsync()
    {

        var user = (await authenticationStateTask).User;

        if (user.Identity.IsAuthenticated)
        {

            Username = user.Identity.Name;

            var ListUser = UserSvc.GetRandomPeople(Username);
            ListFollow = new();
            selUser = UserSvc.GetItemByUsername(Username);
            if (ListUser != null)
            {
                foreach (var item in ListUser)
                {
                    ListFollow.Add(new TempFollow() { IsFollow = false, User = item });
                }
            }
        }

    }

    async Task ToggleFollow(TempFollow temp)
    {
        temp.IsFollow = !temp.IsFollow;
        if (temp.IsFollow)
        {
            UserSvc.FollowUser(selUser,temp.User);
        }
        else
        {
            UserSvc.UnFollowUser(selUser, temp.User);
        }
    }
}
