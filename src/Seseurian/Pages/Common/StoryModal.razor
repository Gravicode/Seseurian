@inject NavigationManager NavMgr
@inject AzureBlobHelper AzureBlobHelper;
@inject IJSRuntime IJS
@using System.IO
@using System.Text.Json
@using System.Text.RegularExpressions;
@inject IToastService toastService
@inject UserProfileService UserSvc
@inject PostService PostSvc
<!-- Story modal -->
<div id="story-modal" class="uk-modal-container" uk-modal>
    <div class="uk-modal-dialog story-modal">
        <button class="uk-modal-close-default lg:-mt-9 lg:-mr-9 -mt-5 -mr-5 shadow-lg bg-white rounded-full p-4 transition dark:bg-gray-600 dark:text-white" type="button" uk-close></button>
        @if (CurrentPost != null)
        {
        <div class="story-modal-media">
                @if (!string.IsNullOrEmpty(CurrentPost.ImageUrls))
                {
                    <img src="@(string.IsNullOrEmpty(CurrentPost.ImageUrls)? "assets/images/post/img4.jpg": CurrentPost.ImageUrls)" alt="" class="inset-0 h-full w-full object-cover">
                }
        </div>
        <div class="flex-1 bg-white dark:bg-gray-900 dark:text-gray-100">

            <!-- post header-->
            <div class="border-b flex items-center justify-between px-5 py-3 dark:border-gray-600">
                <div class="flex flex-1 items-center space-x-4">
                    <a href="#">
                        <div class="bg-gradient-to-tr from-yellow-600 to-pink-600 p-0.5 rounded-full">
                                <img src="@(string.IsNullOrEmpty(selUser?.PicUrl) ? "assets/images/avatars/avatar-2.jpg":selUser?.PicUrl)"
                                 class="bg-gray-200 border border-white rounded-full w-8 h-8">
                        </div>
                    </a>
                        <span class="block text-lg font-semibold"> @selUser?.FullName </span>
                </div>
                <a href="#">
                    <i class="icon-feather-more-horizontal text-2xl rounded-full p-2 transition -mr-1"></i>
                </a>
            </div>
            <div class="story-content p-4" data-simplebar>

                    <p> @CurrentPost?.Message </p>

                <div class="py-4 ">
                    <div class="flex justify-around">
                            <a href="#" @onclick="(()=>TogglePostLike(CurrentPost,PostLike))" class="flex items-center space-x-3">
                                <div class="flex font-bold items-baseline">
                                    <i class="uil-heart mr-1"> </i> @(PostLike ? "UnLike" : "Like")
                                </div>
                        </a>
                        <a href="#" class="flex items-center space-x-3">
                            <div class="flex font-bold items-baseline"> <i class="uil-heart mr-1"> </i> Comment</div>
                        </a>
                        <a href="#" class="flex items-center space-x-3">
                            <div class="flex font-bold items-baseline"> <i class="uil-heart mr-1"> </i> Share</div>
                        </a>
                    </div>
                    <hr class="-mx-4 my-3">
                    <div class="flex items-center space-x-3">
                        <div class="flex items-center">
                                @foreach(var item in CurrentPost.PostLikes?.Take(3))
                                {
                                    <img src="@(UserSvc.GetProfilePic(item.LikedByUser.Id))" alt="" class="w-6 h-6 rounded-full border-2 border-white">
                                }
                                
                        </div>
                        <div>
                             <strong> @CurrentPost.PostLikes.Count.ToString("n0") Likes </strong>
                        </div>
                    </div>
                </div>

                <div class="-mt-1 space-y-1">
                     @if (CurrentPost.PostComments != null)
                        {
                            @foreach (var comment in CurrentPost.PostComments)
                            {
                                <div class="flex flex-1 items-center space-x-2">
                                    <img src="@(UserSvc.GetProfilePic(comment.CommentByUser.Id))" class="rounded-full w-8 h-8">
                                    <div class="flex-1 p-2">
                                        @comment.Comment
                                    </div>
                                    <span class="small text-muted">
                                        @(DateHelper.GetElapsedTime(comment.CreatedDate))
                                    </span>
                                </div>
                            }
                        }
                </div>


            </div>
            <div class="p-3 border-t dark:border-gray-600">
                <div class="bg-gray-200 dark:bg-gray-700 rounded-full rounded-md relative">
                        <input type="text" @bind="NewComment.Comment" @onkeyup="KeyUp" placeholder="Add your Comment.." class="bg-transparent max-h-8 shadow-none">
                    <div class="absolute bottom-0 flex h-full items-center right-0 right-3 text-xl space-x-2">
                        <a href="#"> <i class="uil-image"></i></a>
                        <a href="#"> <i class="uil-video"></i></a>
                    </div>
                </div>
            </div>

        </div>
        }
    </div>
</div>


@code {
    string ErrorMsg;
    [Parameter]
    public EventCallback<bool> OnCommentSuccess { get; set; }
    UserProfile selUser;
    Post _CurrentPost;
    bool LikeStateChange = false;
    [Parameter]
    public Post CurrentPost
    {
        //set;get;

        get { return _CurrentPost; }
        set
        {

            _CurrentPost = value;

            if (_CurrentPost!=null && !LikeStateChange)
                PostLike = _CurrentPost.PostLikes.Any(x => x.LikedByUser.Username == selUser.Username);
            LikeStateChange = false;
        }
    }
    [Parameter]
    public PostComment NewComment { get; set; }
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    [Parameter]
    public bool PostLike { set; get; }

    string Username;
    protected override void OnInitialized()
    {

    }
    async Task KeyUp(KeyboardEventArgs e)
    {

        if (e.Key == "Enter")
        {
            await PostComment();
        }
    }
    async Task TogglePostLike(Post post, bool Like)
    {
        Like = !Like;
        if (Like)
        {
            PostSvc.LikePost(selUser, post.Id);
        }
        else
        {
            PostSvc.UnLikePost(selUser, post.Id);
            var removed = post.PostLikes.Where(x => x.LikedByUser.Username == selUser.Username).FirstOrDefault();
            if (removed != null)
                CurrentPost.PostLikes.Remove(removed);
        }
        PostLike = Like;
        LikeStateChange = true;
       
        await IJS.InvokeVoidAsync("RefreshPost");
        StateHasChanged();

    }
    protected override async Task OnInitializedAsync()
    {
        var user = (await authenticationStateTask).User;

        if (user.Identity.IsAuthenticated)
        {
            Username = user.Identity.Name;
            selUser = UserSvc.GetItemByUsername(Username);

        }
        if (NewComment == null) NewComment = new();

    }

    public async Task Refresh()
    {
        CurrentPost = PostSvc.GetDataById(CurrentPost.Id);
        StateHasChanged();
    }

    async Task PostComment()
    {
        ErrorMsg = "";

        if (string.IsNullOrEmpty(NewComment.Comment))
        {
            ErrorMsg += "Tolong di isi komentarnya. ";

        }

        if (ErrorMsg.Length > 0)
        {
            toastService.ShowWarning(ErrorMsg, "Perhatian");
            return;
        }

        NewComment.CreatedDate = DateHelper.GetLocalTimeNow();

        NewComment.CommentByUser = selUser;


        if (PostSvc.AddComment(NewComment.Comment,selUser,CurrentPost.Id))
        {
            toastService.ShowSuccess("Komentar berhasil.", "Info");
            //await IJS.InvokeVoidAsync("CloseModal", "story-modal");
            await OnCommentSuccess.InvokeAsync(true);
            await IJS.InvokeVoidAsync("RefreshPost");
            await Refresh();
            NewComment = new();
            
        }
        else
        {
            toastService.ShowError("Gagal komentar, ga tau kenapa..", "Kecele");
        }
    }
}
